---
import { Image } from 'astro:assets';
import ToggleButton from './ToggleButton.astro';
interface IImage {
  src: string;
  alt: string;
}

interface Props {
  images: IImage[];
}

const { images } = Astro.props;
---

<section class='relative w-full' role='region' aria-label='Image carousel'>
  <!-- Carousel Wrapper -->
  <div class='relative overflow-hidden w-full'>
    <!-- Toggle Box -->
    <div
      class='absolute top-4 right-4 z-20 bg-white bg-opacity-40 rounded-lg p-2 flex'
    >
      <ToggleButton id='autoplay-toggle' label='Auto play' />
    </div>

    <!-- Carousel Items -->
    <div
      id='carousel'
      class='flex aspect-[16/9] snap-x snap-mandatory overflow-x-auto overflow-y-hidden md:overflow-hidden scroll-smooth rounded-lg'
      tabindex='0'
      aria-live='polite'
    >
      {
        images?.map((image) => (
          <div class='relative w-full h-full aspect-[16/9] touch-pan-x snap-center'>
            <Image
              src={image.src}
              alt={image.alt}
              inferSize
              class='w-full h-full'
              loading='lazy'
            />
          </div>
        ))
      }
    </div>

    <!-- Navigation Buttons -->
    <button
      type='button'
      class='top-0 left-1 md:left-4 navigation-button-wrapper'
      data-action='prev'
      aria-label='Previous slide'
    >
      <span class='navigation-button'> &#8249; </span>
    </button>
    <button
      type='button'
      class='top-0 right-1 md:right-4 navigation-button-wrapper'
      data-action='next'
      aria-label='Next slide'
    >
      <span class='navigation-button'> &#8250; </span>
    </button>

    <!-- Indicators -->
    <div
      id='indicators'
      class='absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2'
    >
      {
        images?.map((_, index) => (
          <button
            class={`indicator w-2 md:w-3 h-2 md:h-3 rounded-full ${
              index === 0 ? 'bg-gray-800' : 'bg-gray-400'
            }`}
            data-slide-index={index}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))
      }
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const carousel = document.querySelector<HTMLDivElement>('#carousel')!;
    const images = carousel.querySelectorAll<HTMLImageElement>('img');
    const indicators =
      document.querySelectorAll<HTMLButtonElement>('.indicator');
    const navigationButtons =
      document.querySelectorAll<HTMLButtonElement>('[data-action]');
    let currentIndex = 0;
    const autoplayInterval = 3000; // Change slides every 3 seconds
    let autoplayTimer: ReturnType<typeof setInterval>;
    let isAutoplay = true;
    const autoPlayToggle = document.getElementById('autoplay-toggle')!;

    // Updates the carousel to show the slide at the given index.
    function updateCarousel(index: number): void {
      const slideWidth = images[0].clientWidth;
      carousel.scrollTo({ left: slideWidth * index, behavior: 'smooth' });
      currentIndex = index;

      // Update indicators
      indicators.forEach((dot, i) => {
        dot.classList.toggle('bg-gray-800', i === index);
        dot.classList.toggle('bg-gray-400', i !== index);
      });
    }

    // Handles navigation button clicks (params: prev/next).
    function handleNavigation(action: string): void {
      const newIndex =
        action === 'prev'
          ? currentIndex === 0
            ? images.length - 1
            : currentIndex - 1
          : (currentIndex + 1) % images.length;
      updateCarousel(newIndex);
      resetAutoplay(); // Reset autoplay when manually navigating
    }

    // Start the autoplay.
    function startAutoplay(): void {
      if (autoplayTimer) clearInterval(autoplayTimer); // Clear existing timer

      if (isAutoplay) {
        autoplayTimer = setInterval(() => {
          const newIndex = (currentIndex + 1) % images.length;
          updateCarousel(newIndex);
        }, autoplayInterval);
      }
    }

    // Stop the autoplay.
    function stopAutoplay(): void {
      clearInterval(autoplayTimer);
    }

    // Reset the autoplay.
    function resetAutoplay(): void {
      stopAutoplay();
      startAutoplay();
    }

    // Event listener for auto-play toggle
    autoPlayToggle.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;

      if (target.checked) {
        // Start auto-play when checked
        isAutoplay = true;
        startAutoplay();
      } else {
        // Stop auto-play when unchecked
        isAutoplay = false;
        stopAutoplay();
      }
    });

    // Add event listeners for navigation buttons
    navigationButtons.forEach((button) => {
      button.addEventListener('click', () =>
        handleNavigation(button.dataset.action!)
      );
    });

    // Add event listeners for indicators
    indicators.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        updateCarousel(index);
        resetAutoplay(); // Reset autoplay on manual selection
      });
    });

    // Start autoplay on load
    startAutoplay();

    // Pause autoplay on hover or focus
    carousel.addEventListener('mouseover', stopAutoplay);
    carousel.addEventListener('focusin', stopAutoplay);

    // Resume autoplay when focus or mouse leaves
    carousel.addEventListener('mouseout', () => {
      if (isAutoplay) startAutoplay();
    });
    carousel.addEventListener('focusout', () => {
      if (isAutoplay) startAutoplay();
    });
  });
</script>

<style>
  .navigation-button-wrapper {
    @apply absolute z-30 flex items-center justify-center h-full px-4 cursor-pointer focus:outline-none;
  }

  .navigation-button {
    @apply inline-flex items-center justify-center w-7 h-7 md:w-10 md:h-10 rounded-full bg-black/30 hover:bg-black/50 pb-1;
  }
</style>
