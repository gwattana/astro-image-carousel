---
interface IImage {
  src: string;
  alt: string;
}

interface Props {
  images: IImage[];
}


const { images } = Astro.props;
---

<section class="relative w-full mb-10">
  <!-- Carousel Wrapper -->
  <div class="relative overflow-hidden w-full">

    <!-- Carousel Items -->
    <div
      id="carousel"
      class="flex w-full h-full snap-x snap-mandatory overflow-x-auto md:overflow-hidden scroll-smooth rounded-lg"
      tabindex="0"
      aria-live="polite"
    >
      {images?.map((image, index) => (
        <img
          key={index}
          src={image.src}
          alt={image.alt}
          class="snap-start w-full h-full object-cover"
          loading="lazy"
        />
      ))}
    </div>

    <!-- Navigation Buttons -->
    <button
      type="button"
      class="absolute top-0 left-4 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
      data-action="prev"
      aria-label="Previous slide"
    >
      <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 hover:bg-white/50">
        &#8249;
      </span>
    </button>
    <button
      type="button"
      class="absolute top-0 right-4 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
      data-action="next"
      aria-label="Next slide"
    >
      <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 hover:bg-white/50">
        &#8250;
      </span>
    </button>

    <!-- Indicators -->
    <div
      id="indicators"
      class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2"
    >
      {images?.map((_, index) => (
        <button
          class={`indicator w-3 h-3 rounded-full ${
            index === 0 ? "bg-gray-800" : "bg-gray-400"
          }`}
          data-slide-index={index}
          aria-label={`Go to slide ${index + 1}`}
        />
      ))}
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const carousel = document.querySelector<HTMLDivElement>("#carousel")!;
    const images = carousel.querySelectorAll<HTMLImageElement>("img");
    const indicators = document.querySelectorAll<HTMLButtonElement>(".indicator");
    const navigationButtons = document.querySelectorAll<HTMLButtonElement>("[data-action]");
    let currentIndex = 0;
    const autoplayInterval = 3000; // Change slides every 3 seconds
    let autoplayTimer: number;

    // Updates the carousel to show the slide at the given index.
    function updateCarousel(index: number): void {
      const slideWidth = images[0].clientWidth;
      carousel.scrollTo({ left: slideWidth * index, behavior: "smooth" });
      currentIndex = index;

      // Update indicators
      indicators.forEach((dot, i) => {
        dot.classList.toggle("bg-gray-800", i === index);
        dot.classList.toggle("bg-gray-400", i !== index);
      });
    }

    // Handles navigation button clicks (params: prev/next).
    function handleNavigation(action: string): void {
      const newIndex =
        action === "prev"
          ? (currentIndex === 0 ? images.length - 1 : currentIndex - 1)
          : (currentIndex + 1) % images.length;
      updateCarousel(newIndex);
      resetAutoplay(); // Reset autoplay when manually navigating
    }

    // Start the autoplay.
    function startAutoplay(): void {
      autoplayTimer = setInterval(() => {
        const newIndex = (currentIndex + 1) % images.length;
        updateCarousel(newIndex);
      }, autoplayInterval);
    }

    // Stop the autoplay.
    function stopAutoplay(): void {
      clearInterval(autoplayTimer);
    }

    // Reset the autoplay.
    function resetAutoplay(): void {
      stopAutoplay();
      startAutoplay();
    }

    // Add event listeners for navigation buttons
    navigationButtons.forEach((button) => {
      button.addEventListener("click", () =>
        handleNavigation(button.dataset.action!)
      );
    });

    // Add event listeners for indicators
    indicators.forEach((dot, index) => {
      dot.addEventListener("click", () => {
        updateCarousel(index);
        resetAutoplay(); // Reset autoplay on manual selection
      });
    });

    // Start autoplay on load
    startAutoplay();

    // Pause autoplay on hover or focus
    carousel.addEventListener("mouseover", stopAutoplay);
    carousel.addEventListener("mouseout", startAutoplay);
    carousel.addEventListener("focusin", stopAutoplay);
    carousel.addEventListener("focusout", startAutoplay);
  });
</script>
